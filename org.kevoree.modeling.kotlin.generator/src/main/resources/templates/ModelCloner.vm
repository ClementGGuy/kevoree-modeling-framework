#* @vtlvariable name="packageName" type="java.lang.String" *#
#* @vtlvariable name="containerRootName" type="java.lang.String" *#
#* @vtlvariable name="ctx" type="org.kevoree.modeling.kotlin.generator.GenerationContext" *#
#* @vtlvariable name="packages" type="java.util.Collection<java.lang.String>" *#
#* @vtlvariable name="helper" type="org.kevoree.modeling.kotlin.generator.ProcessorHelperClass" *#




package ${packageName}.cloner

class ModelCloner : ClonerFactories {

    fun clone<A>(o : A) : A? {
        return clone(o,false)
    }

    fun clone<A>(o : A,readOnly : Boolean) : A? {
        return clone(o,readOnly,false)
    }

    fun cloneMutableOnly<A>(o : A,readOnly : Boolean) : A? {
        return clone(o,readOnly,true)
    }

    private fun clone<A>(o : A,readOnly : Boolean,mutableOnly : Boolean) : A? {
        if(o is ${containerRootName}) {
             #if($ctx.jS)
             val context = java.util.HashMap<Any,Any>()
             #else
             val context = java.util.IdentityHashMap<Any,Any>()
             #end
            (o as ${ctx.getKevoreeContainer().get()}).getClonelazy(context, this,mutableOnly)
            return (o as ${ctx.getKevoreeContainer().get()}).resolve(context,readOnly,mutableOnly) as A
        } else {
            return null
        }
    }

     #foreach($pack in $packages)
     override var ${pack.replace(".", "_")} : $pack = ${pack.substring(0, $pack.lastIndexOf("."))}.impl.Default${helper.getLastName($pack)}()
     #end

}
