
#* @vtlvariable name="formatedFactoryName" type="java.lang.String" *#
#* @vtlvariable name="packElem" type="java.lang.String" *#
#* @vtlvariable name="ctx" type="org.kevoree.modeling.kotlin.generator.GenerationContext" *#
#* @vtlvariable name="FQNHelper" type="org.kevoree.modeling.kotlin.generator.ProcessorHelper" *#

package ${packElem};

trait ${formatedFactoryName} {

fun setRecursiveReadOnly() : Unit
fun eContainer() : ${formatedFactoryName}?
fun isReadOnly() : Boolean
fun isRecursiveReadOnly() : Boolean
fun setInternalReadOnly()
fun delete()

fun modelEquals(similarObj : Any?) : Boolean

#if(${ctx.genSelector})
    fun selectByQuery(query : String) : List<Any>
#end

#if(!${ctx.jS})
    fun findByPath<A>(query : String, clazz : Class<A>) : A?
#end

fun findByPath(query : String) : Any?
fun path() : String?

#if(${ctx.jS})
    fun getClonelazy(subResult : java.util.HashMap<Any,Any>, _factories : ${FQNHelper.fqn($ctx, ${ctx.getBasePackageForUtilitiesGeneration()})}.factory.MainFactory, mutableOnly: Boolean)
    fun resolve(addrs : java.util.HashMap<Any,Any>,readOnly:Boolean, mutableOnly: Boolean) : Any
#else
    fun containedElements() : Iterable<${packElem}.${formatedFactoryName}>
    fun containedAllElements() : Iterable<${packElem}.${formatedFactoryName}>
    fun getClonelazy(subResult : java.util.IdentityHashMap<Any,Any>, _factories : ${FQNHelper.fqn($ctx, ${ctx.getBasePackageForUtilitiesGeneration()})}.factory.MainFactory, mutableOnly: Boolean)
    fun resolve(addrs : java.util.IdentityHashMap<Any,Any>,readOnly:Boolean, mutableOnly: Boolean) : Any
#end

}