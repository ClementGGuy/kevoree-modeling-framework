
#* @vtlvariable name="formatedFactoryName" type="java.lang.String" *#
#* @vtlvariable name="packElem" type="java.lang.String" *#
#* @vtlvariable name="ctx" type="org.kevoree.modeling.kotlin.generator.GenerationContext" *#
#* @vtlvariable name="FQNHelper" type="org.kevoree.modeling.kotlin.generator.ProcessorHelper" *#

package ${packElem};

import java.util.*;
import java.lang.*;

public interface ${formatedFactoryName} {

public void setRecursiveReadOnly();
public ${formatedFactoryName} eContainer();

@org.jetbrains.annotations.NotNull
public Boolean isReadOnly();

@org.jetbrains.annotations.NotNull
public Boolean isRecursiveReadOnly();

public void setInternalReadOnly();
public void delete();

@org.jetbrains.annotations.NotNull
public Boolean modelEquals(Object similarObj);

@org.jetbrains.annotations.NotNull
public Iterable<${packElem}.${formatedFactoryName}> containedElements();

@org.jetbrains.annotations.NotNull
public Iterable<${packElem}.${formatedFactoryName}> containedAllElements();

#if(${ctx.genSelector})
    @org.jetbrains.annotations.NotNull
    public List<Object> selectByQuery(@org.jetbrains.annotations.NotNull String query);
#end

public <A> A findByPath(@org.jetbrains.annotations.NotNull String query, @org.jetbrains.annotations.NotNull Class<A> clazz);

Object findByPath(@org.jetbrains.annotations.NotNull String query);
public String path();

public void getClonelazy(@org.jetbrains.annotations.NotNull java.util.IdentityHashMap<Object,Object> subResult,  @org.jetbrains.annotations.NotNull ${FQNHelper.fqn($ctx, ${ctx.getBasePackageForUtilitiesGeneration()})}.factory.MainFactory _factories, @org.jetbrains.annotations.NotNull Boolean mutableOnly);
public Object resolve(@org.jetbrains.annotations.NotNull java.util.IdentityHashMap<Object,Object> addrs,@org.jetbrains.annotations.NotNull Boolean readOnly, @org.jetbrains.annotations.NotNull Boolean mutableOnly);

}