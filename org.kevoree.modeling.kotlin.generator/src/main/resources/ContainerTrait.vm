#*
 * Licensed under the GNU LESSER GENERAL PUBLIC LICENSE, Version 3, 29 June 2007;
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * 	http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Authors:
 * 	Fouquet Francois
 * 	Nain Gregory
 *#

package ${packElem}.impl

trait ${formatedFactoryName}Internal {

    internal open var internal_eContainer : ${packElem}.${formatedFactoryName}?
    internal open var internal_unsetCmd : (()->Unit)?

    fun eContainer() : ${packElem}.${formatedFactoryName}? { return internal_eContainer }

    internal open var internal_readOnlyElem : Boolean

    internal open var internal_recursive_readOnlyElem : Boolean

    open fun setRecursiveReadOnly()

    fun setInternalReadOnly(){
        internal_readOnlyElem = true
    }

    fun isReadOnly() : Boolean {
        return internal_readOnlyElem
    }

    fun isRecursiveReadOnly() : Boolean {
        return internal_recursive_readOnlyElem
    }

    fun setEContainer( container : ${packElem}.${formatedFactoryName}?, unsetCmd : (()->Unit)? ) {

        if(internal_readOnlyElem){return}

        val tempUnsetCmd = internal_unsetCmd
        internal_unsetCmd = null
        if(tempUnsetCmd != null){
            tempUnsetCmd()
        }
        internal_eContainer = container
        internal_unsetCmd = unsetCmd
    }

    fun internalGetQuery(selfKey : String) : String? { return null }

}