#* @vtlvariable name="ctx" type="org.kevoree.modeling.kotlin.generator.GenerationContext" *#
#* @vtlvariable name="metamodelName" type="java.lang.String" *#
#* @vtlvariable name="modelName" type="java.lang.String" *#
#* @vtlvariable name="ProcessorHelper" type="org.kevoree.modeling.kotlin.generator.ProcessorHelperClass" *#
@Test
public void launcherOfTest() {
${metamodelName}${modelName}Test test = new ${metamodelName}${modelName}Test();
System.out.println("Setting up the test...");
test.setUp();
System.out.println("Done.");
System.out.println("Loading in EMF...");
long loadEmfStart = System.nanoTime();
test.timeEMFLoad${modelName}(1);
long loadEmfStop = System.nanoTime();
System.out.println("Done.");
System.out.println("Loading in KMF...");
long loadKmfStart = System.nanoTime();
test.timeKMFLoad${modelName}(1);
long loadKmfStop = System.nanoTime();
System.out.println("Done.");
System.out.println("Saving in EMF...");
long saveEmfStart = System.nanoTime();
test.timeEMFSave${modelName}(1);
long saveEmfStop = System.nanoTime();
System.out.println("Done.");
System.out.println("Saving in KMF...");
long saveKmfStart = System.nanoTime();
test.timeKMFSave${modelName}(1);
long saveKmfStop = System.nanoTime();
System.out.println("Done.");
System.out.println("Cloning in EMF...");
long cloneEmfStart = System.nanoTime();
test.timeEMFClone${modelName}(1);
long cloneEmfStop = System.nanoTime();
System.out.println("Done.");
System.out.println("Cloning in KMF...");
long cloneKmfStart = System.nanoTime();
test.timeKMFClone${modelName}(1);
long cloneKmfStop = System.nanoTime();
System.out.println("Done.");

System.out.println("LOAD :: EMF=" + (loadEmfStop - loadEmfStart) + "ns  KMF=" + (loadKmfStop - loadKmfStart) + "ns");
System.out.println("SAVE :: EMF=" + (saveEmfStop - saveEmfStart) + "ns  KMF=" + (saveKmfStop - saveKmfStart) + "ns");
System.out.println("CLONE :: EMF=" + (cloneEmfStop - cloneEmfStart) + "ns  KMF=" + (cloneKmfStop - cloneKmfStart) + "ns");
}