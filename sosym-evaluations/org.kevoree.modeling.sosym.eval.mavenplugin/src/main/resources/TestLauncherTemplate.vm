#* @vtlvariable name="ctx" type="org.kevoree.modeling.kotlin.generator.GenerationContext" *#
#* @vtlvariable name="metamodelName" type="java.lang.String" *#
#* @vtlvariable name="modelName" type="java.lang.String" *#
#* @vtlvariable name="ProcessorHelper" type="org.kevoree.modeling.kotlin.generator.ProcessorHelperClass" *#
@Test
public void launcherOfTest() {
${metamodelName}${modelName}Test test = new ${metamodelName}${modelName}Test();
System.out.println("Setting up the test...");
test.setUp();
System.out.println("Done.");
System.out.println("Loading in EMF...");
long loadEmfStart = System.nanoTime();
test.timeEMFLoad${modelName}(1);
long loadEmfStop = System.nanoTime();
System.out.println("Done.");
System.out.println("Loading in KMF...");
long loadKmfStart = System.nanoTime();
test.timeKMFLoad${modelName}(1);
long loadKmfStop = System.nanoTime();
System.out.println("Done.");
System.out.println("Saving in EMF...");
long saveEmfStart = System.nanoTime();
test.timeEMFSave${modelName}(1);
long saveEmfStop = System.nanoTime();
System.out.println("Done.");
System.out.println("Saving in KMF...");
long saveKmfStart = System.nanoTime();
test.timeKMFSave${modelName}(1);
long saveKmfStop = System.nanoTime();
System.out.println("Done.");
System.out.println("Cloning in EMF...");
long cloneEmfStart = System.nanoTime();
test.timeEMFClone${modelName}(1);
long cloneEmfStop = System.nanoTime();
System.out.println("Done.");
System.out.println("Cloning in KMF...");
long cloneKmfStart = System.nanoTime();
test.timeKMFClone${modelName}(1);
long cloneKmfStop = System.nanoTime();
System.out.println("Done.");

TreeIterator modelIterator = test.emfModel.eAllContents();
int count = 0;
while(modelIterator.hasNext()) {
count++;
modelIterator.next();
}

PrintWriter pr = null;
try {

File results = new File("SosymTestResults.csv");

if(!results.exists()) {
pr = new PrintWriter(results);
pr.println("metamodel;model;nb model elements;EMF load time(ns);KMF load time(ns);EMF save time(ns);KMF save time(ns);EMF clone time(ns);KMF clone time(ns); model in memory");
} else {
pr = new PrintWriter(new BufferedWriter(new FileWriter(results, true)));
}
pr.print("${metamodelName};");
pr.print("${modelName};");
pr.print(count + ";");
pr.print((loadEmfStop - loadEmfStart) + ";");
pr.print((loadKmfStop - loadKmfStart) + ";");
pr.print((saveEmfStop - saveEmfStart) + ";");
pr.print((saveKmfStop - saveKmfStart) + ";");
pr.print((cloneEmfStop - cloneEmfStart) + ";");
pr.print((cloneKmfStop - cloneKmfStart) + ";");
pr.print("model in memory");
pr.println();

} catch (IOException e) {
e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
} finally {
if(pr != null) {
pr.flush();
pr.close();
}
}

}